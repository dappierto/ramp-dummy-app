generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model ERPAccount {
  id        String  @id @default(uuid())
  ramp_id   String?
  name      String
  code      String
  type      String
  is_active Boolean @default(true)
}

model CustomFields {
  id            String  @id @default(uuid())
  ramp_id       String?
  name          String
  input_type    String
  is_splittable String
  is_active     Boolean @default(true)
}

model CustomFieldsOptions {
  id                    String  @id @default(uuid())
  field_id             String  // References CustomFields table
  value                String
  is_active            Boolean @default(true)
  ramp_field_option_id String?  // Stores the Ramp field option ID after sync
}

model Vendor {
  id                 String   @id @default(uuid()) // Unique ID for internal reference
  erp_id             String?  // ID from ERP system (if exists)
  ramp_vendor_id     String?  // ID from Ramp's "vendors" endpoint (if exists)
  ramp_accounting_id String? 
  ramp_vendor_contact_id String? // ID from Ramp's "accounting_vendors" endpoint (if exists)
  name               String   // Vendor name
  tax_id             String?  // EIN, TIN, or other tax identifier
  email              String?  // Vendor contact email
  phone              String?  // Vendor phone number
  address            String?  // Vendor address (single-line storage for now)
  city              String?  
  state             String?  
  zip_code          String?  
  country           String?  
  payment_method    String?  // ACH, Check, Wire, Credit Card, etc.
  bank_account      String?  // Last 4 of bank account or identifier for ACH
  routing_number    String?  // Routing number for ACH payments
  created_at        DateTime @default(now()) // Timestamp when added to DB
  updated_at        DateTime @updatedAt // Timestamp for last update
  is_active         Boolean  @default(true) // Vendor is active or inactive
}

model Users {
  id            String    @id @default(uuid())
  first_name    String
  last_name     String
  email         String    @unique
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

model Entities {
  entity_id    String   @id @default(uuid())
  entity_name  String
  ramp_entity_id String?
}

model Bills {
  id                String   @id @default(uuid())
  ramp_bill_id      String?
  invoice_number        String
  memo String?
  invoice_currency String
  payment_method   String
  ramp_entity_id String?
  vendor_contact_id String
  vendor_id  String
  due_date          DateTime
  issue_date        DateTime
  
  // Relation: Each bill has multiple line items
  line_items        BillLineItem[]
}

model BillLineItem {
  id             String  @id @default(uuid())
  bill_id        String  // Foreign key to Bills
  description    String
  line_type      String
  quantity       Int
  unit_price     Float
  total_amount   Float // Should be calculated as quantity * unit_price
  gl_account_id  String? // Optional field to associate with GL accounts
  category_id    String? // Optional field for accounting categories
  field_option_id String?

  // Relation: Each line item belongs to a bill
  bill           Bills   @relation(fields: [bill_id], references: [id], onDelete: Cascade)
}

// prisma/schema.prisma
model ApiTokens {
  id        String   @id @default(cuid())
  scope     String   @unique
  token     String   // Remove the @db.Text modifier
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([scope])
  @@index([expiresAt])
}

// prisma/schema.prisma
model RampConnection {
  id            String   @id @default(cuid())
  businessName  String
  businessId    String   @unique
  accessToken   String
  refreshToken  String
  tokenExpires  DateTime
  scopes        String   // Will store as comma-separated list
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// prisma/schema.prisma
model ActiveAccount {
  id        String   @id @default(cuid())
  businessId String
  updatedAt DateTime @updatedAt
}

model Client {
  id            String       @id @default(uuid())
  name          String
  industry      String?
  status        String      @default("active")
  client_owner  String      // Ramp user ID
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  engagements   Engagement[]
}

model Engagement {
  id                  String            @id @default(uuid())
  name                String
  client_id           String
  client              Client            @relation(fields: [client_id], references: [id])
  engagement_manager  String            // Ramp user ID
  engagement_director String            // Ramp user ID
  start_date         DateTime
  end_date           DateTime?
  status             String            @default("active")
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  team_members       ProjectTeamMember[]
  approvers          projectApprover[]
  project_rules      EngagementApprovalRule[]
}

model ProjectTeamMember {
  id            String     @id @default(uuid())
  engagement_id String
  engagement    Engagement @relation(fields: [engagement_id], references: [id])
  user_id       String     // Ramp user ID
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  @@unique([engagement_id, user_id])
}

model projectApprover {
  id            String     @id @default(uuid())
  engagement_id String
  engagement    Engagement @relation(fields: [engagement_id], references: [id])
  user_id       String     // Ramp user ID
  approver_type String     // manager, director, client_owner
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  @@unique([engagement_id, user_id, approver_type])
}

model ApprovalRule {
  id            String    @id @default(uuid())
  min_amount    Float     // Minimum amount for this rule
  max_amount    Float?    // Maximum amount for this rule (null means no upper limit)
  approver_type String    // manager, director, client_owner
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@unique([min_amount, max_amount])
}

model EngagementApprovalRule {
  id            String     @id @default(uuid())
  engagement_id String
  engagement    Engagement @relation(fields: [engagement_id], references: [id])
  min_amount    Float      // Minimum amount for this rule
  max_amount    Float?     // Maximum amount for this rule (null means no upper limit)
  approver_type String     // manager, director, client_owner
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  @@unique([engagement_id, min_amount, max_amount])
}